// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class LoginfunctionalityTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void loginwithvaliduser() {
    // Test name: Login with valid user
    // Step # | name | target | value | comment
    // 1 | open | https://the-internet.herokuapp.com/ |  | 
    driver.get("https://the-internet.herokuapp.com/");
    // 2 | setWindowSize | 1936x1066 |  | 
    driver.manage().window().setSize(new Dimension(1936, 1066));
    // 3 | click | linkText=Form Authentication |  | 
    driver.findElement(By.linkText("Form Authentication")).click();
    // 4 | click | id=username |  | 
    driver.findElement(By.id("username")).click();
    // 5 | type | id=username | tomsmith | 
    driver.findElement(By.id("username")).sendKeys("tomsmith");
    // 6 | click | id=password |  | 
    driver.findElement(By.id("password")).click();
    // 7 | type | id=password | SuperSecretPassword! | 
    driver.findElement(By.id("password")).sendKeys("SuperSecretPassword!");
    // 8 | click | css=.fa |  | Clicking on the login button, and successfully logging in.
    driver.findElement(By.cssSelector(".fa")).click();
    // 9 | click | linkText=Logout |  | 
    driver.findElement(By.linkText("Logout")).click();
  }
  @Test
  public void loginwithinvalidusername() {
    // Test name: Login with invalid username 
    // Step # | name | target | value | comment
    // 1 | open | https://the-internet.herokuapp.com/ |  | 
    driver.get("https://the-internet.herokuapp.com/");
    // 2 | setWindowSize | 1936x1066 |  | 
    driver.manage().window().setSize(new Dimension(1936, 1066));
    // 3 | click | linkText=Form Authentication |  | 
    driver.findElement(By.linkText("Form Authentication")).click();
    // 4 | click | id=username |  | 
    driver.findElement(By.id("username")).click();
    // 5 | type | id=username | test | 
    driver.findElement(By.id("username")).sendKeys("test");
    // 6 | click | id=password |  | 
    driver.findElement(By.id("password")).click();
    // 7 | type | id=password | SuperSecretPassword! | 
    driver.findElement(By.id("password")).sendKeys("SuperSecretPassword!");
    // 8 | click | css=.fa |  | Clicking on the logging button, an error message appears telling witch of the input fields is incorrect.  
    driver.findElement(By.cssSelector(".fa")).click();
  }
  @Test
  public void loginwithinvalidpassword() {
    // Test name: Login with invalid password
    // Step # | name | target | value | comment
    // 1 | open | https://the-internet.herokuapp.com/ |  | 
    driver.get("https://the-internet.herokuapp.com/");
    // 2 | setWindowSize | 1936x1066 |  | 
    driver.manage().window().setSize(new Dimension(1936, 1066));
    // 3 | click | linkText=Form Authentication |  | 
    driver.findElement(By.linkText("Form Authentication")).click();
    // 4 | click | id=username |  | 
    driver.findElement(By.id("username")).click();
    // 5 | type | id=username | tomsmith | 
    driver.findElement(By.id("username")).sendKeys("tomsmith");
    // 6 | click | id=password |  | 
    driver.findElement(By.id("password")).click();
    // 7 | type | id=password | test | 
    driver.findElement(By.id("password")).sendKeys("test");
    // 8 | click | css=.fa |  | Clicking on the logging button, an error message appears telling witch of the input fields is incorrect.  
    driver.findElement(By.cssSelector(".fa")).click();
  }
}
